version: '3.8'

services:
  # Frontend Vue.js application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: chronosync-frontend
    restart: unless-stopped
    ports:
      - "4173:80"
    environment:
      - SERVICE_TYPE=frontend
      - SERVICE_FQDN_FRONTEND
      - NODE_ENV=production
      - VITE_API_URL=/api
    depends_on:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.chronosync-frontend.rule=Host(`${FRONTEND_FQDN:-app.chronosync.local}`)
      - traefik.http.routers.chronosync-frontend.entrypoints=web
      - traefik.http.services.chronosync-frontend.loadbalancer.server.port=80
      - coolify.managed=true
    networks:
      - chronosync-network

  # Backend Express.js service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: chronosync-backend
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      - SERVICE_TYPE=backend
      - SERVICE_FQDN_API
      - NODE_ENV=production
      - ALLOW_ALL_ORIGINS=true
      - PORT=3005
      - JWT_SECRET=${JWT_SECRET:-replace_this_with_a_secure_random_string_in_production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-30d}
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-chronosync_password}
      - DB_HOST=postgres-chronosync
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-chronosync_db}
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-chronosync_password}@postgres-chronosync:5432/${POSTGRES_DB:-chronosync_db}
      - API_URL=/api
      - FRONTEND_URL=${FRONTEND_FQDN:-https://app.chronosync.local}
    depends_on:
      - postgres-chronosync
    labels:
      # Direct backend access (not typically used in production)
      - traefik.enable=true
      - traefik.http.routers.chronosync-backend.rule=Host(`${API_FQDN:-api.chronosync.local}`)
      - traefik.http.routers.chronosync-backend.entrypoints=web
      - traefik.http.services.chronosync-backend.loadbalancer.server.port=3005
      
      # API routes through frontend domain with /api prefix
      - traefik.http.routers.chronosync-api.rule=Host(`${FRONTEND_FQDN:-app.chronosync.local}`) && PathPrefix(`/api`)
      - traefik.http.routers.chronosync-api.entrypoints=web
      - traefik.http.services.chronosync-api.loadbalancer.server.port=3005
      
      # Add path stripping middleware to remove /api prefix before forwarding to backend
      - traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api
      
      # CORS headers middleware
      - traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=GET,OPTIONS,PUT,POST,DELETE,PATCH
      - traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=*
      - traefik.http.middlewares.cors-headers.headers.accessControlAllowCredentials=true
      - traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=Content-Type,Authorization,Origin,X-Requested-With
      - traefik.http.middlewares.cors-headers.headers.accessControlMaxAge=86400
      
      # Apply both middlewares to the API router
      - traefik.http.routers.chronosync-api.middlewares=api-stripprefix,cors-headers
      
      # Coolify managed label
      - coolify.managed=true
    networks:
      - chronosync-network

  # PostgreSQL Database - Simple setup
  postgres-chronosync:
    image: postgres:16-alpine
    container_name: postgres-chronosync
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-chronosync_password}
      - POSTGRES_DB=${POSTGRES_DB:-chronosync_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    labels:
      - coolify.managed=true
    networks:
      - chronosync-network

networks:
  chronosync-network:
    driver: bridge

volumes:
  postgres_data: 