# Use a specific node version for better compatibility
FROM node:20-alpine

# Set environment variables
ENV NODE_ENV=production

# Install required tools
RUN apk add --no-cache wget nginx netcat-openbsd curl

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml nx.json ./
COPY packages/web/common/package.json ./packages/web/common/
COPY packages/web/backend/package.json ./packages/web/backend/
COPY packages/web/frontend/package.json ./packages/web/frontend/

# Install dependencies
RUN npm install -g pnpm@10.6.1 nx && \
    pnpm install --frozen-lockfile

# Copy the rest of the source code
COPY . .

# Build all packages
RUN pnpm build:web:common && \
    pnpm build:web:backend && \
    pnpm build:web:frontend

# Create nginx configuration for frontend
RUN mkdir -p /nginx && \
    echo 'server { \
    listen 80; \
    root /app/packages/web/frontend/dist; \
    index index.html; \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
}' > /nginx/frontend.conf

# Create wait-for-postgres script
RUN echo '#!/bin/sh' > /app/wait-for-postgres.sh && \
    echo 'set -e' >> /app/wait-for-postgres.sh && \
    echo 'host="$1"; shift' >> /app/wait-for-postgres.sh && \
    echo 'port="$1"; shift' >> /app/wait-for-postgres.sh && \
    echo 'cmd="$@"' >> /app/wait-for-postgres.sh && \
    echo 'echo "Waiting for PostgreSQL at $host:$port..."' >> /app/wait-for-postgres.sh && \
    echo 'until nc -z "$host" "$port" > /dev/null 2>&1; do' >> /app/wait-for-postgres.sh && \
    echo '  echo "Postgres is unavailable - sleeping"' >> /app/wait-for-postgres.sh && \
    echo '  sleep 1' >> /app/wait-for-postgres.sh && \
    echo 'done' >> /app/wait-for-postgres.sh && \
    echo 'echo "PostgreSQL is up - executing command"' >> /app/wait-for-postgres.sh && \
    echo 'exec $cmd' >> /app/wait-for-postgres.sh && \
    chmod +x /app/wait-for-postgres.sh

# Create startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'if [ "$SERVICE_TYPE" = "backend" ]; then' >> /app/start.sh && \
    echo '  echo "Starting backend service..."' >> /app/start.sh && \
    echo '  cd /app' >> /app/start.sh && \
    echo '  echo "Environment: $NODE_ENV, Port: $PORT, DB Host: $DB_HOST"' >> /app/start.sh && \
    echo '  /app/wait-for-postgres.sh $DB_HOST $DB_PORT NODE_OPTIONS="--max-old-space-size=512" node dist/packages/web/backend/index.js' >> /app/start.sh && \
    echo 'elif [ "$SERVICE_TYPE" = "frontend" ]; then' >> /app/start.sh && \
    echo '  echo "Starting frontend service..."' >> /app/start.sh && \
    echo '  nginx -c /nginx/frontend.conf -g "daemon off;"' >> /app/start.sh && \
    echo 'else' >> /app/start.sh && \
    echo '  echo "SERVICE_TYPE must be set to frontend or backend"' >> /app/start.sh && \
    echo '  exit 1' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expose ports for both services
EXPOSE 3005 80

# Set entrypoint to our start script
ENTRYPOINT ["/app/start.sh"] 